<LED>:
  canvas.before:
    Color:
      rgba: self.color
    Rectangle:
      pos: self.pos[ 0 ] + 5, self.pos[ 1 ] + 5
      size: self.size[ 0 ] - 10, self.size[ 1 ] - 10

<RobRehabGUI>:

  BoxLayout:
    orientation: 'vertical'
    pos: 0, 0
    size: root.size[ 0 ] / 6, root.size[ 1 ]
    padding: 20, 30
    spacing: 10

    Label:
      text: '\nServer Address'
      size_hint_y: 0.6
    TextInput:
      id: address_input
      text: 'ip://127.0.0.1'
      multiline: False
      size_hint_y: 0.9
      font_size: self.size[ 1 ] * 0.5
      #on_text_validate: root.SetUserName( self.text )
    Button:
      text: 'Connect/Refresh'
      pos_hint: { 'center_x': 0.5 }
      size_hint_x: 0.8
      on_release: root.ConnectClient( address_input.text )

    Label:
      text: '\nUser Name'
      size_hint_y: 0.6
    TextInput:
      id: user_name_input
      multiline: False
      size_hint_y: 0.9
      font_size: self.size[ 1 ] * 0.6
      on_text_validate: root.SetUserName( self.text )

    Label:
      size_hint_y: 0.2
#    BoxLayout:
#      Label:
#        text: 'Robot:'
#        size_hint: ( 0.5, 0.8 )
#      Label:
#        id: robot_id_display
#        font_size: self.size[ 1 ] * 0.6
#        size_hint_y: 0.8
    BoxLayout:
      Label:
        text: 'Joint:'
        size_hint: ( 0.5, 0.8 )
      Button:
        id: joint_selector
        text: root.NULL_ID
        size_hint_y: 0.8
    BoxLayout:
      Label:
        text: 'Axis:'
        size_hint: ( 0.5, 0.8 )
      Button:
        id: axis_selector
        text: root.NULL_ID
        size_hint_y: 0.8

    Label:
      size_hint_y: 0.2
    ToggleButton:
      text: 'Enable Motor'
      pos_hint: { 'center_x': 0.5 }
      size_hint_x: 0.8
      on_release: root.SetEnable( self.state == 'down' )

    Label:
      text: '\nControl State'
      size_hint_y: 0.8
    ToggleButton:
      id: offset_button
      text: 'Offset Adjust'
      group: 'control_state'
      pos_hint: { 'center_x': 0.5 }
      size_hint_x: 0.8
      on_release: root.SetOffset( self.state == 'down' )
    ToggleButton:
      id: calibration_button
      text: 'Calibration'
      group: 'control_state'
      pos_hint: { 'center_x': 0.5 }
      size_hint_x: 0.8
      on_release: root.SetCalibration( self.state == 'down' )
    LED:
      id: indication_led
      pos_hint: { 'center_x': 0.5 }
      size_hint_x: 0.7
    ToggleButton:
      id: sampling_button
      text: 'Sampling'
      group: 'control_state'
      pos_hint: { 'center_x': 0.5 }
      size_hint_x: 0.8
      on_state: root.SetOptimization( self.state == 'down' )
    ToggleButton:
      id: operation_button
      text: 'Operation'
      pos_hint: { 'center_x': 0.5 }
      size_hint_x: 0.8
      on_state: root.SetOperation( self.state == 'down' )

    Label:
      size_hint_y: 0.2
    Label:
      text: '\nStiffness: ' + format(stiffness_slider.value, '.3f' )
      size_hint_y: 0.2
    Slider:
      id: stiffness_slider
      range: 0, 100
      step: 1
      on_value: root.SetSetpoints()
    Label:
      text: '\nDamping: ' + format(damping_slider.value, '.3f' )
      size_hint_y: 0.2
    Slider:
      id: damping_slider
      range: 0, 10
      step: 1
      on_value: root.SetSetpoints()

  BoxLayout:
    id: data_graph
    orientation: 'vertical'
    pos: root.size[ 0 ] / 6, 0
    size: 4 * root.size[ 0 ] / 6, root.size[ 1 ]
    padding: 0, 20

  BoxLayout:
    orientation: 'horizontal'
    pos: 5 * root.size[ 0 ] / 6, 0
    size: root.size[ 0 ] / 6, root.size[ 1 ]
    padding: 20, 20
    spacing: 20

    BoxLayout:
      orientation: 'vertical'
      Label:
        text: 'Position\nMeasure'
        size_hint_y: 0.1
      Slider:
        id: measure_slider
        orientation: 'vertical'
        range: -2.0, 2.0
      Label:
        text: format( measure_slider.value, '.3f' )
        size_hint_y: 0.05

    BoxLayout:
      orientation: 'vertical'
      Label:
        text: 'Position\nSetpoint'
        size_hint_y: 0.1
      Slider:
        id: setpoint_slider
        orientation: 'vertical'
        range: measure_slider.range
        on_value: root.SetSetpoints()
      TextInput:
        text: format( setpoint_slider.value, '.3f' )
        multiline: False
        size_hint_x: 0.8
        size_hint_y: 0.05
        on_text_validate: setpoint_slider.value = float(self.text)
